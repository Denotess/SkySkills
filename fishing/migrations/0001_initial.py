# Generated by Django 5.2.7 on 2025-10-16 11:48

import django.contrib.postgres.fields
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DataVersion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('domain', models.CharField(help_text='Domain: fishing, dungeons, mining, etc.', max_length=32, unique=True)),
                ('version', models.CharField(max_length=32)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['domain'],
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=128, unique=True)),
                ('item_type', models.CharField(choices=[('rod', 'Fishing Rod'), ('helmet', 'Helmet'), ('chestplate', 'Chestplate'), ('leggings', 'Leggings'), ('boots', 'Boots'), ('pet', 'Pet'), ('accessory', 'Accessory'), ('equipment', 'Equipment'), ('bait', 'Bait')], max_length=20)),
                ('rarity', models.CharField(default='COMMON', max_length=20)),
                ('base_stats', models.JSONField(default=dict, help_text='Base stats: SCC, FS, Wisdom, MF, Health, Defense, etc.')),
                ('attributes', models.JSONField(default=dict, help_text='Special attributes, reforge info, pet level, etc.')),
                ('cost_source', models.CharField(choices=[('bazaar', 'Bazaar'), ('ah', 'Auction House'), ('manual', 'Manual Entry')], default='manual', max_length=20)),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('coords', models.CharField(blank=True, help_text='x y z coords', max_length=64)),
                ('water_or_lava', models.CharField(choices=[('water', 'Water'), ('lava', 'Lava')], default='water', max_length=10)),
                ('island', models.CharField(default='Hub', max_length=64)),
                ('requirements', models.JSONField(default=dict, help_text='Requirements: min_level, quest, etc.')),
                ('notes', models.TextField(blank=True)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Method',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('description', models.TextField()),
                ('requirements', models.JSONField(default=dict)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None)),
                ('calculators_used', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, help_text='List of calculator names: SCC, FS, XP, Profit, etc.', size=None)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ign', models.CharField(db_index=True, max_length=16, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GearSet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('set_bonuses', models.JSONField(default=dict, help_text='Set bonuses applied when full set equipped')),
                ('requirements', models.JSONField(default=dict, help_text='Requirements: min_level, island, quest_completion, etc.')),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pieces', models.ManyToManyField(related_name='gear_sets', to='fishing.item')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProfileSnapshot',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('hypixel_profile_id', models.CharField(db_index=True, max_length=64)),
                ('skill_fishing_level', models.IntegerField(default=0)),
                ('raw_json', models.JSONField(default=dict, help_text='Full Hypixel API response for reproducibility')),
                ('derived_stats', models.JSONField(default=dict, help_text='Computed stats: SCC, FS, Wisdom, MF, etc.')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='snapshots', to='fishing.player')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('top_choice_json', models.JSONField(help_text='Top recommended gear/location/method')),
                ('breakdown_json', models.JSONField(help_text='Factor breakdown: XP/hr, Profit/hr, SCC, FS, etc.')),
                ('score', models.FloatField()),
                ('version', models.CharField(help_text='Data version + calculator version', max_length=32)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('snapshot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='fishing.profilesnapshot')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BazaarPrice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('price', models.DecimalField(decimal_places=2, max_digits=15)),
                ('source_ts', models.DateTimeField(db_index=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='fishing.item')),
            ],
            options={
                'ordering': ['-source_ts'],
                'indexes': [models.Index(fields=['item', '-source_ts'], name='fishing_baz_item_id_b0aae5_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='profilesnapshot',
            index=models.Index(fields=['player', '-created_at'], name='fishing_pro_player__f582ae_idx'),
        ),
        migrations.AddIndex(
            model_name='profilesnapshot',
            index=models.Index(fields=['hypixel_profile_id'], name='fishing_pro_hypixel_767e67_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['snapshot', '-created_at'], name='fishing_rec_snapsho_1e9984_idx'),
        ),
    ]
