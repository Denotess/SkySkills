from django.http import JsonResponse
from django.views.decorators.http import require_GET, require_POST
from django.shortcuts import render
from django.views.decorators.csrf import csrf_exempt
from .hypixel_api import HypixelAPIClient, PlayerNotFoundError, RateLimitError, HypixelAPIError
from .models import Player, ProfileSnapshot
import asyncio
import logging

logger = logging.getLogger(__name__)


@require_GET
def health_check(request):
    """Health check endpoint for monitoring."""
    return JsonResponse({
        "status": "ok",
        "service": "skyskills-fishing",
        "version": "0.1.0"
    })


def home(request):
    """Homepage with IGN input form."""
    return render(request, 'home.html')


@csrf_exempt
@require_POST
def player_lookup(request):
    """
    Handle IGN lookup - returns profile selection page.
    """
    ign = request.POST.get('ign', '').strip()
    api_key = request.POST.get('api_key', '').strip() or None
    
    logger.info(f"Player lookup request for IGN: {ign}, API key provided: {bool(api_key)}")
    
    if not ign:
        return render(request, 'partials/error.html', {
            'error_title': 'Missing IGN',
            'error_message': 'Please enter a Minecraft username.'
        })
    
    if not api_key:
        return render(request, 'partials/error.html', {
            'error_title': 'API Key Required',
            'error_message': 'Hypixel requires an API key to access SkyBlock profiles. Please enter your API key. You can get one by typing "/api new" in the Hypixel Minecraft server.'
        })
    
    try:
        result = asyncio.run(fetch_all_profiles(ign, api_key))
        
        logger.info(f"Successfully fetched {len(result['profiles'])} profiles for {ign}")
        
        # Return profile selection template with API key
        return render(request, 'partials/profile_selection.html', {
            'ign': result['ign'],
            'uuid': result['uuid'],
            'profiles': result['profiles'],
            'api_key': api_key  # Pass API key to template
        })
    
    except PlayerNotFoundError as e:
        logger.warning(f"Player not found: {ign} - {e}")
        return render(request, 'partials/error.html', {
            'error_title': 'Player Not Found',
            'error_message': str(e)
        })
    
    except RateLimitError:
        logger.error(f"Rate limit hit for IGN: {ign}")
        return render(request, 'partials/error.html', {
            'error_title': 'Rate Limit Exceeded',
            'error_message': 'Too many requests. Please try again in a minute.'
        })
    
    except HypixelAPIError as e:
        logger.error(f"Hypixel API error for {ign}: {e}")
        return render(request, 'partials/error.html', {
            'error_title': 'API Error',
            'error_message': f'Failed to fetch data from Hypixel: {str(e)}'
        })
    
    except Exception as e:
        logger.exception(f"Unexpected error for {ign}: {e}")
        return render(request, 'partials/error.html', {
            'error_title': 'Unexpected Error',
            'error_message': f'Something went wrong: {str(e)}'
        })


@csrf_exempt
@require_POST
def profile_detail(request, uuid, profile_id):
    """
    Show detailed stats for a specific profile.
    """
    # Get API key from POST data (passed via hidden field)
    api_key = request.POST.get('api_key', '').strip() or None
    
    if not api_key:
        return render(request, 'partials/error.html', {
            'error_title': 'API Key Missing',
            'error_message': 'Please search for the player again.'
        })
    
    try:
        result = asyncio.run(fetch_profile_detail(uuid, profile_id, api_key))
        
        logger.info(f"Successfully fetched profile {profile_id} for UUID {uuid}")
        
        # Save to database
        player, created = Player.objects.get_or_create(
            uuid=result['uuid'],
            defaults={'ign': result['ign']}
        )
        
        if not created and player.ign != result['ign']:
            player.ign = result['ign']
            player.save()
        
        # Save profile snapshot
        snapshot = ProfileSnapshot.objects.create(
            player=player,
            hypixel_profile_id=result['profile_id'],
            skill_fishing_level=result['fishing_level'],
            raw_json=result.get('raw_profile', {}),
            derived_stats={
                'fishing_xp': result['fishing_xp'],
                'trophy_fish_count': len(result.get('trophy_fish', {})),
                'sea_creature_kills_count': len(result.get('sea_creature_kills', {})),
                'profile_name': result['profile_name']
            }
        )
        
        # Return success template
        return render(request, 'partials/player_stats.html', {
            'player': player,
            'snapshot': snapshot,
            'stats': result
        })
    
    except Exception as e:
        logger.exception(f"Error fetching profile detail: {e}")
        return render(request, 'partials/error.html', {
            'error_title': 'Error',
            'error_message': f'Failed to load profile: {str(e)}'
        })


async def fetch_all_profiles(ign: str, api_key: str):
    """
    Fetch all profiles for a player with basic stats.
    """
    client = HypixelAPIClient(api_key=api_key)
    
    try:
        # Get UUID
        uuid = await client.get_uuid_from_ign(ign)
        
        # Get all profiles
        profiles_data = await client.get_skyblock_profiles(uuid)
        profiles = profiles_data['profiles']
        
        # Extract basic stats for each profile
        profile_list = []
        for profile in profiles:
            stats = client.extract_fishing_stats(profile, uuid)
            profile_list.append({
                'profile_id': stats['profile_id'],
                'cute_name': stats['cute_name'],
                'fishing_level': stats['fishing_level'],
                'fishing_xp': stats['fishing_xp'],
                'trophy_fish_count': len(stats['trophy_fish']),
                'sea_creatures_count': len(stats['sea_creature_kills'])
            })
        
        # Sort by fishing level (descending)
        profile_list.sort(key=lambda x: x['fishing_xp'], reverse=True)
        
        return {
            'ign': ign,
            'uuid': uuid,
            'profiles': profile_list
        }
    
    finally:
        await client.close()


async def fetch_profile_detail(uuid: str, profile_id: str, api_key: str):
    """
    Fetch detailed stats for a specific profile.
    """
    client = HypixelAPIClient(api_key=api_key)
    
    try:
        # Get profiles
        profiles_data = await client.get_skyblock_profiles(uuid)
        
        # Find the specific profile
        profile = next((p for p in profiles_data['profiles'] if p['profile_id'] == profile_id), None)
        
        if not profile:
            raise PlayerNotFoundError(f"Profile {profile_id} not found")
        
        # Extract detailed stats
        stats = client.extract_fishing_stats(profile, uuid)
        
        # Get IGN from Mojang API
        uuid_clean = uuid.replace('-', '')
        response = await client.client.get(f"https://sessionserver.mojang.com/session/minecraft/profile/{uuid_clean}")
        ign = response.json().get('name', 'Unknown')
        
        return {
            'ign': ign,
            'uuid': uuid,
            'profile_id': stats['profile_id'],
            'profile_name': stats['cute_name'],
            'fishing_level': stats['fishing_level'],
            'fishing_xp': stats['fishing_xp'],
            'trophy_fish': stats['trophy_fish'],
            'sea_creature_kills': stats['sea_creature_kills'],
            'raw_profile': profile,
            'advanced_stats': advanced_stats
        }
    
    finally:
        await client.close()

from .stats_calculator import FishingStatsCalculator
